generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  courses   Course[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course {
  id              String    @id @default(cuid())
  userId          String    // Clerk user ID
  title           String
  description     String?   @db.Text
  duration        String?
  enrollmentCount Int       @default(0)
  imageUrl        String?
  attachmentUrl   String?   // Added to replace CourseAttachment model
  price           Float     @default(0)
  isPublished     Boolean   @default(false)
  categoryId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  category    Category   @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  enrollments CourseEnrollment[]
  discussions Discussion[]  

  @@index([userId])
  @@index([categoryId])
}

model Chapter {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  videoUrl     String
  attachmentUrl String?  // Added to replace Attachment model
  position     Int
  isPublished  Boolean   @default(false)
  courseId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    ChapterProgress[]
  assessment  Assessment?
  discussions Discussion[]  

  @@index([courseId])
}

model Discussion {
  id          String    @id @default(cuid())
  userId      String    // Clerk user ID
  content     String    @db.Text
  courseId    String?
  chapterId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter     Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  replies     Reply[]
  likes       DiscussionLike[]

  @@index([userId])
  @@index([courseId])
  @@index([chapterId])
}

model Reply {
  id            String    @id @default(cuid())
  userId        String    // Clerk user ID
  content       String    @db.Text
  discussionId  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  discussion    Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  likes        ReplyLike[]

  @@index([userId])
  @@index([discussionId])
}

model DiscussionLike {
  id            String    @id @default(cuid())
  userId        String    // Clerk user ID
  discussionId  String
  createdAt     DateTime  @default(now())

  discussion    Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId])
  @@index([userId])
  @@index([discussionId])
}

model ReplyLike {
  id        String    @id @default(cuid())
  userId    String    // Clerk user ID
  replyId   String
  createdAt DateTime  @default(now())

  reply     Reply     @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@index([userId])
  @@index([replyId])
}

model Assessment {
  id          String    @id @default(cuid())
  chapterId   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions   Question[]
  results     AssessmentResult[]

  @@index([chapterId])
}

model Question {
  id            String    @id @default(cuid())
  question      String
  options       String[]
  correctAnswer String
  assessmentId  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role        Role      @default(STUDENT)

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model ChapterProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model AssessmentResult {
  id            String   @id @default(cuid())
  userId        String
  assessmentId  String
  score         Int
  isPassed      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assessmentId])
  @@index([userId])
  @@index([assessmentId])
}

enum Role {
  STUDENT
  ADMIN
}